/* tslint:disable */
/* eslint-disable */
/**
 * Vecto API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vecto.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Modality } from './Modality';
import {
    ModalityFromJSON,
    ModalityFromJSONTyped,
    ModalityToJSON,
} from './Modality';

/**
 * 
 * @export
 * @interface VectorUpdateRequestDto
 */
export interface VectorUpdateRequestDto {
    /**
     * 
     * @type {Modality}
     * @memberof VectorUpdateRequestDto
     */
    modality?: Modality;
    /**
     * id of the vector whose embeddings should be changed
     * @type {Array<number>}
     * @memberof VectorUpdateRequestDto
     */
    id?: Array<number>;
    /**
     * Input as binary data
     * @type {Array<Blob>}
     * @memberof VectorUpdateRequestDto
     */
    input?: Array<Blob>;
}

/**
 * Check if a given object implements the VectorUpdateRequestDto interface.
 */
export function instanceOfVectorUpdateRequestDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VectorUpdateRequestDtoFromJSON(json: any): VectorUpdateRequestDto {
    return VectorUpdateRequestDtoFromJSONTyped(json, false);
}

export function VectorUpdateRequestDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): VectorUpdateRequestDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'modality': !exists(json, 'modality') ? undefined : ModalityFromJSON(json['modality']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'input': !exists(json, 'input') ? undefined : json['input'],
    };
}

export function VectorUpdateRequestDtoToJSON(value?: VectorUpdateRequestDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'modality': ModalityToJSON(value.modality),
        'id': value.id,
        'input': value.input,
    };
}

