/* tslint:disable */
/* eslint-disable */
/**
 * Vecto API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vecto.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MonthlyUsageResponse,
} from '../models/index';
import {
    MonthlyUsageResponseFromJSON,
    MonthlyUsageResponseToJSON,
} from '../models/index';

export interface UsageRequest {
    vectorSpaceId: number;
    month: number;
    year: number;
}

/**
 * 
 */
export class MetricsApi extends runtime.BaseAPI {

    /**
     * Return the usage metrics for the selected month
     * Return the usage metrics for the selected month
     */
    async usageRaw(requestParameters: UsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonthlyUsageResponse>> {
        if (requestParameters.vectorSpaceId === null || requestParameters.vectorSpaceId === undefined) {
            throw new runtime.RequiredError('vectorSpaceId','Required parameter requestParameters.vectorSpaceId was null or undefined when calling usage.');
        }

        if (requestParameters.month === null || requestParameters.month === undefined) {
            throw new runtime.RequiredError('month','Required parameter requestParameters.month was null or undefined when calling usage.');
        }

        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling usage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("SecurityScheme", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v0/space/{vector_space_id}/usage/{year}/{month}`.replace(`{${"vector_space_id"}}`, encodeURIComponent(String(requestParameters.vectorSpaceId))).replace(`{${"month"}}`, encodeURIComponent(String(requestParameters.month))).replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonthlyUsageResponseFromJSON(jsonValue));
    }

    /**
     * Return the usage metrics for the selected month
     * Return the usage metrics for the selected month
     */
    async usage(requestParameters: UsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonthlyUsageResponse> {
        const response = await this.usageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
